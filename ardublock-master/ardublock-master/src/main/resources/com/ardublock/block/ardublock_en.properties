
###############
#  ARDUBLOCK  #
###############

#FILE
#****************************
ardublock.file.suffix=Ardublock Program File(*.abp)

#UI
#****************************
ardublock.ui.new=New
ardublock.ui.save=Save
ardublock.ui.saveAs=Save As
ardublock.ui.load=Open
ardublock.ui.upload=Upload to Arduino
ardublock.ui.clone=Clone
ardublock.ui.add_comment=Add Comment
ardublock.ui.delete_comment=Delete Comment
ardublock.ui.organize_blocks=Organize all blocks
ardublock.ui.create_refer=create reference
ardublock.ui.website=letsgoING Project
ardublock.ui.website.domain=http://letsgoing.de
ardublock.ui.lmssite=Online LMS
ardublock.ui.lmssite.domain=http://learn.letsgoing.org
ardublock.ui.blockReference=Block Reference
ardublock.ui.blockReference.domain=http://blockreference.letsgoing.org
ardublock.ui.modeButton.modeExpert = expert blocks
ardublock.ui.modeButton.modeStandard = standard blocks
ardublock.ui.serialMonitor=Serial Monitor
ardublock.ui.saveImage=Save as image...
ardublock.ui.version=Version 2.03

#ERROR
#****************************
ardublock.error_msg.unset_variable=The variable is undefined. Before the variable can be read, a value must be assigned to it.
ardublock.error_msg.digital_var_slot=Digital variable slot must take a 'digital variable' name.\nHint: Look at the 'variable' socket on the highlighted block
ardublock.error_msg.number_var_slot=Standard variable slot must take a standard 'analog variable name'.\nHint: Look at the 'variable' socket on the highlighted block
ardublock.error_msg.number_local_var_slot=Variable slot must take a standard 'local analog variable name'.\nHint: Look at the 'variable' socket on the highlighted block
ardublock.error_msg.number_slot=This slot must take a standard 'analog variable name' or "analog value".\nHint: Look at the 'variable' socket on the highlighted block
ardublock.error_msg.long_number_var_slot=Large integer variable slot must take a 'Large Integer' variable name.\nHint: Look at the 'variable' socket on the highlighted block
ardublock.error_msg.double_number_var_slot=variable slot must take a 'Decimal' variable name.\nHint: Look at the 'variable' socket on the highlighted block
ardublock.error_msg.char_var_slot=Char variable slot must take a char variable name.\nHint: Look at the 'variable' socket on the highlighted block
ardublock.error_msg.number_const_write=Constants can be written only once. Don\'t use the setter-block twice!
ardublock.error_msg.array_var_slot='Array variable' slot must take an 'array variable' name.\nHint: Look at the 'variable' socket on the highlighted block
ardublock.error_msg.array_size_slot='Array size' slot must take a standard integer constant
ardublock.error_msg.string_var_slot=String variable slot must take a String variable name.\nHint: Look at the 'variable' socket on the highlighted block
ardublock.error_msg.string_slot=String slot must take a String variable or a String variable name.\nHint: Look at the 'variable' socket on the highlighted block
ardublock.error_msg.Digital_pin_slot=Pin# must be a valid digital pin number found on an Arduino Board
ardublock.error_msg.Analog_pin_slot=Pin# must be a valid analog input pin number found on an Arduino Board
ardublock.error_msg.stepper_duplicated=There is already a stepper with this name
ardublock.error_msg.stepper_not_existing=There is no stepper with this name

#TRANSLATOR
#****************************
ardublock.translator.exception.subroutineNameDuplicated=two or more subroutines have the same name!
ardublock.translator.exception.noLoopFound=No loop found!
ardublock.translator.exception.multipleLoopFound=multiple loop block found!
ardublock.translator.exception.socketNull=A required Value, Variable Name or 'Test' is missing.\nHint:: Look for an empty 'socket' in the highlighted block.
ardublock.translator.exception.subroutineNotDeclared=subroutine not declared

#MESSAGE
#****************************
message.title.error=Error
message.title.question=Question
message.content.open_unsaved=Ardublock program has changed, do you want to save?
message.content.overwrite=Do you want overwrite existing file?
message.file_not_found=File Not Found or Permission Denied
message.question.newfile_on_workspace_changed=The program has changed, do you want to create a new Ardublock file?


##################
#  BLOCK CONFIG  #
##################

#COMMON
#****************************
bg.dummy=dummy
bg.dummy.description=

bc.commands=Commands
bc.pin_number=pin#
bc.pwm_pin_number=~pin#
bc.value=value
bc.variable=variable

#TETRAPIX
#****************************
bd.tetrapix=Tetrapix

#CONTROL
#****************************
bd.control=Control

bg.loop=loop
#legacy support
bg.loop1=loop
bg.loop1.description=loop
bg.loop2=loop
bg.loop2.description=loop
bg.loop3=loop
bg.loop3.description=loop
#End of legacy support
bg.program=program
bg.setup=setup
bg.if=if
bg.ifelse=if/else
#bg.repeat=repeat
bg.repeat_times=repeat
bg.repeat=repeat and count
bg.break=break
bg.delay=delay MILLIS
bg.delay_microseconds=delay MICROS
bg.subroutine=subroutine
bg.subroutine-ref=subroutine
bg.subroutine_var=subroutine_with_value
bg.subroutine-ref_var=subroutine_with_value
bg.ref_var=variable_transmitted
bg.while=while
bg.do_while=do while
bg.interrupt=interrupt
bg.wait=wait millis
bg.repeat_control=repeat between

bg.program.description=Main program with loop and setup
bg.loop.description=Main Program loop without setup
bg.delay.description=Delay for "milliseconds" indicated.\nNOTE: 1000 millis = 1 second
bg.if.description=Run the commands if the "test" is true
bg.ifelse.description=Run the first set of commands if the "test" is true, otherwise it will do the second set of commands.
bg.while.description=Run the commands as long as the "test" is true
bg.do_while.description=Run the list of commands. Then, if 'test' is true, keep on repeating it until 'test' is 'false'
bg.repeat_times.description=Repeat a list of commands a number of times.
bg.repeat.description=Repeat a list of commands a number of times. "variable" counts the repetitions.
bg.break.description=break 
bg.subroutine.description=A list of commands we can call by a single name.\nThey will run only if 'called', see CONTROL menu.
bg.subroutine-ref.description=Run the list of commands in the subroutine called...
bg.delay_microseconds.description=Delay for "microseconds" indicated. \nNOTE: 1000000 micros = 1 second
bg.interrupt.description=interrupt block\nIR-Nr.0 = Pin2\nIR-Nr.1 = Pin3\n\nIR-Mode\n0: LOW\n1: HIGH\n2: RISING\n3: FALLING\n4: CHANGE\n
bg.wait.description=wait millis
bg.repeat_control.description=Repeat the commands with "variable" ranging between "start" and "stop" values. "variable" changes by "increment" after each repetition


bc.setup=setup
bc.loop=loop
bc.do=loop
bc.var=iteration variable name
bc.microseconds=microseconds
bc.milliseconds=milliseconds
bc.transmit=transmit
bc.repeat_times=times
bc.test=test
bc.then=then
bc.else=else
bc.condition=test
bc.start=start
bc.end=stop
bc.increment=steps of
bc.time=Second
bc.sub_var = subroutine return value
bc.sub_return = return val
bc.irName = isr name
bc.irNumber = number
bc.irType = type

#OUTPUT
#****************************
bd.output=Output

bg.pin-write-analog=analogWrite
bg.pin-write-digital=digitalWrite

bg.servo_default=Servo
bg.tone=tone
bg.tone_time=tone
bg.no_tone=no tone
bg.neopixel_init=Neopixel Init
bg.neopixel_pixel_color=Neopixel Pixel Color
bg.neopixel_show=Neopixel Show
bg.neopixel_brightness=Neopixel Brightness
#bg.servo.description=Control a servo
bg.servo_default.description=Control a servo
bg.tone.description=Generates a square wave of the specified frequency (and 50%	duty cycle) on a pin.
bg.tone_time.description=Generates a square wave of the specified frequency (and 50% duty cycle) on a pin.
bg.no_tone.description=Stops the generation of a square wave triggered by tone().
bg.attach_servo_default=attach servo
bg.detach_servo_default=detach Servo
bg.stepper_2pin=Setup for Stepper
bg.stepper_4pin=Setup for Stepper
bg.stepper_set_rpm=Stepper set rpm
bg.stepper_steps=Stepper steps


bg.neopixel_pixel_color.description=Pixel Color between 0 and 255 for each color
bg.neopixel_brightness.description=Brightness between 0 and 255
bg.neopixel_init.description=Init Neopixel\nBus: NEO_KHZ800 / NEO_KHZ400\nColor: NEO_GRB / NEO_RGB
bg.neopixel_show.description= Push the color data to the strip
bg.neopixel_Brightness.description=Brightness between 0 and 255
bg.attach_servo_default.description=attach servo
bg.detach_servo_default.description=detach servo
bg.stepper_2pin.description=Setup for stepper motor with 2-pin-wiring
bg.stepper_4pin.description=Setup for stepper motor with 4-pin-wiring
bg.stepper_set_rpm.description=Set stepper speed in rotation per minute
bg.stepper_steps.description=Move stepper x steps

bc.steps=Steps/r
bc.speed=rpm
bc.red=Red Start
bc.blue=Blue Start
bc.green=Green Start
bc.brightness=Brightness
bc.Nb_of_Led=how many pixel
bc.Nb_of_Led.description=how many pixel
bc.Pixel_Nb=number of the pixel
bc.Pixel_Nb.description=which pixel to program
bc.schnittstelle=Bus
bc.farbfolge=Color
bc.angle=angle
bc.frequency =frequency
#INPUT
#****************************
bd.input=Input

bg.pin-read-analog=analog input
bg.pin-read-digital=digital pin
bg.pin-read-digital-pullup=input pullup
bg.LGI_Ultrasonic=ultrasonic

bg.LGI_Qtouch_Init1=LGI_Qtouch_Init1
bg.LGI_Qtouch_Init2=LGI_Qtouch_Init2
bg.LGI_Qtouch_Init3=LGI_Qtouch_Init3
bg.LGI_Qtouch_Button1_getOffset=getOffset1
bg.LGI_Qtouch_Button2_getOffset=getOffset2
bg.LGI_Qtouch_Button3_getOffset=getOffset3
bg.LGI_Qtouch_Button1_getRaw.description=get raw value
bg.LGI_Qtouch_Button2_getRaw.description=get raw value
bg.LGI_Qtouch_Button3_getRaw.description=get raw value
bg.LGI_Qtouch_Button1_getRaw=Raw-Value Q-Touch-Button1
bg.LGI_Qtouch_Button2_getRaw=Raw-Valuen Q-Touch-Button2
bg.LGI_Qtouch_Button3_getRaw=Raw-Value Q-Touch-Button3
bg.LGI_Qtouch_Button1_isTouched=Q-Button1 is touched
bg.LGI_Qtouch_Button2_isTouched=Q-Button2 is touched
bg.LGI_Qtouch_Button3_isTouched=Q-Button3 is touched
bg.LGI_Qtouch_Slider_Init=Slider Init
bg.LGI_Qtouch_Slider_getTouchPosition=get touch position
bg.LGI_Qtouch_Slider_getOffset1=getOffset1
bg.LGI_Qtouch_Slider_getOffset2=getOffset2
bg.LGI_Qtouch_Slider_getOffset3=getOffset3

bg.pin-read-analog.description=Read analog value from pin. Zero volts = 0. Five volts = 1023
bg.pin-read-digital.description=Read digital value (HIGH or LOW) from pin.
bg.pin-read-digital-pullup.description=Set pin to digital input\nPin will report HIGH if unconnected.
bg.LGI_Ultrasonic.description=ultrasonic
bg.LGI_Qtouch_Button1_getOffset.description=getOffset1
bg.LGI_Qtouch_Init1.description=LGI_Qtouch_Init1
bg.LGI_Qtouch_Init2.description=LGI_Qtouch_Init2
bg.LGI_Qtouch_Init3.description=LGI_Qtouch_Init3
bg.LGI_Qtouch_Button2_getOffset.description=getOffset2
bg.LGI_Qtouch_Button3_getOffset.description=getOffset3
bg.LGI_Qtouch_Button1_isTouched.description=Button1 is touched
bg.LGI_Qtouch_Button2_isTouched.description=Button2 is touched
bg.LGI_Qtouch_Button3_isTouched.description=Button3 is touched
bg.LGI_Qtouch_Slider_Init.description=Slider Init
bg.LGI_Qtouch_Slider_getOffset1.description=getOffset1
bg.LGI_Qtouch_Slider_getTouchPosition.description=get touch position
bg.LGI_Qtouch_Slider_getOffset2.description=getOffset2
bg.LGI_Qtouch_Slider_getOffset3.description=getOffset3

bc.analogpin_number=#AnalogPin

#LOGIC
#****************************
bd.logic=Logical Operators
#bd.logic=Tests

bg.not_equal_poly= !=
bg.equal_string= ==
bg.not_equal_string= !=
bg.equal_poly= ==
bg.equal_digital===
bg.not_equal_digital=!=
bg.greater=>
bg.greater_equal=>=
bg.less=<
bg.less_equal=<=
bg.not=not
bg.not_equal=!=
bg.and=and
bg.or=or
bg.equal_digital===
bg.not_equal_digital=!=
bg.string_empty=is empty
bg.string_length=lenght of

bg.greater.description=True if the first number is greater the second number
bg.less.description=True if the first number is less then the second number
bg.equal.description=True if the first number equals to the second number
bg.equal_digital.description=True if the first number equals to the second number
bg.greater_equal.description=True if the first number is greater or equal to the second number
bg.less_equal.description=True if the first number is less or equal to the second number
bg.not_equal.description=True if the first number is not equal to the second number
bg.not_equal_digital.description=True if the first number is not equal to the second number
bg.and.description=True if both of the two conditions are true.
bg.or.description=True if one or both of the two conditions are true.
bg.not.description=The opposite of
bg.equal_poly.description=True if first character is equal to the second character
bg.not_equal_poly.description=True if first character is not equal to the second character
bg.equal_string.description=True if first string is equal to the second string
bg.not_equal_string.description=True if first string is not equal to the second string
bg.string_empty.description=True if string is empty
bg.string_length.description=returns length of string

bg.pin-write-digital.description=Set digital pin to HIGH or LOW
bg.pin-toggle.description=toggle digital pin
bg.pin-write-analog.description=Write analog voltage to pin. Eg \n 0 = Zero volts. 255 = five volts.

#OPERATORS
#****************************
bd.operators=Math Operators

bg.constrain=constrain
bg.abs=abs
bg.addition=+
bg.cos=cos
bg.division=\u00f7
bg.equal===
bg.map=map
bg.map_common=map [0, 1023] to [0, 255]
bg.toint=to int
bg.max=max
bg.min=min
bg.modulo=%
bg.multiplication=x
bg.pow=power
bg.random=random
bg.random_range=random
bg.sin=sin
bg.sqrt=sqrt
bg.subtraction=-
bg.tan=tan

bg.addition.description=Sum of two numbers
bg.subtraction.description=Difference of two numbers
bg.multiplication.description=Product of two numbers
bg.division.description=Quotient of two numbers
bg.random.description=Generate a random number less than the number
bg.map_common.description=map value from [0, 1023] to [0, 255]
bg.map.description=Map value from "from" range to "to" range
bg.toint.description=string to tint
bg.constrain.description=Constrain a number between two values
bg.random_range.description=Generate random number between min and (max - 1)
bg.string_toInt.description=string to int

bc.max=max
bc.min=min
bc.to=to
bc.fromLow= from Low
bc.fromHigh=from High
bc.toLow=to Low
bc.toHigh=to High
bc.from=from
bc.base=base
bc.exponent=exponent
bc.low=lower
bc.high=higher


#NUMBERS
#****************************
bd.number=Variables/Constants
#bd.chars= Chars Test

bg.millis=Milliseconds
bg.digital-high=HIGH
bg.digital-low=LOW
bg.true=TRUE
bg.false=FALSE
bg.variable_char=character_variable
bg.local_variable_char=local_character_variable
bg.setter_variable_char=set character variable
bg.char=A
bg.read_array=read element
bg.create_array=create an array
bg.setter_array=set an array member
bg.string_toInt=toInt
bg.setter_variable_string=set string variable
bg.string=ABCD
bg.message_single=ABCD
bg.char=A
bg.number=1
bg.setter_variable_digital=set digital variable
bg.setter_variable_number=set analog variable
bg.setter_variable_number_byte=set short analog variable
bg.setter_variable_number_unsigned_long=set long unsigned analog variable
bg.setter_variable_number_long=set long analog variable
bg.setter_variable_number_float=set decimal variable
bg.cast_number=cast analog
bg.cast_number_byte=cast short analog
bg.cast_number_long=cast long analog
bg.cast_number_float=cast decimal
bg.variable_digital=digital variable
bg.constant_digital=digital constant
bg.variable_number=analog variable
bg.constant_number=analog constant 
bg.variable_string=string variable
bg.local_variable_string=local string variable
bg.local_variable_number=local analog variable
bg.local_variable_digital= local digital variable
bg.concat_string=concatenate strings
bg.cast_byte_string=cast byte to string 

bg.millis.description=Returns milliseconds since last power-up or reset.\nNote: Use to set a 'Large Integer' variable.
bg.true.description=Boolean True.
bg.false.description=Boolean False.
bg.digital-high.description=Pin HIGH
bg.digital-low.description=Pin LOW
bg.char.description=character variable
bg.number.description=analog variable
bg.variable_number.description=analog variable.\nType depends on setter block
bg.constant_number.description= analog constant\nEvery constant can be written only once\nType depends on setter block
bg.variable_digital.description=Digital variable
bg.constant_digital.description=digital constant
bg.variable_string.description=string variable
bg.setter_variable_string.description=set string variable
bg.setter_variable_number.description=Set standard integer variable.\n-32,768 to +32,767
bg.setter_variable_number_byte.description=Set standard byte (uint8_t) variable.\n0 to 255
bg.setter_variable_number_unsigned_long.description=Set large integer variable.\n0 to 4,294,967,295
bg.setter_variable_number_long.description=Set large integer variable. \n-2,147,483,648 to 2,147,483,647
bg.setter_variable_number_float.description=Set 'Decimal' variable.\n +/- 3.4028235E+38
bg.setter_variable_digital.description=Set digital variable.\nHIGH or LOW
bg.cast_number.description=cast int
bg.cast_number_byte.description=cast byte
bg.cast_number_long.description=cast long
bg.cast_number_float.description=cast float
bg.read_array.description=Get the value of an array member
bg.create_array.description=Create an array of standard integers.\n-32,768 to +32,767
bg.setter_array.description=Set the value of an array member
bg.setter_variable_char.description=Set a character variable
bg.variable_char.description=Character variable name
bg.local_variable_char.description=local character variable name
bg.string.description=Edit message text
bg.message_single.description=Edit message text
bg.local_variable_number.description=local Variable\nType depends on setter block
bg.variable_string.description=String variable
bg.local_variable_string.description=Local string variable
bg.local_variable_digital.description=local digital Var
bg.concat_string.description=concatenate strings
bg.cast_byte_string.description=cast byte to string



bc.array=Name the array
bc.message=String
bc.vecsize=size
bc.num=#
bc.position=Position
bc.variable_digital=Bool
bc.variable_number=Integer
bc.variable_number_unsigned_long=Unsigned_long
bc.variable_number_long = Long
bc.variable_number_float=float
#COMMUNICATION
#****************************
bd.communication=Communication

bg.serial_read_poly=Serial.read
bg.serial_parseInt=Serial.parseInt
bg.serial_available=Serial.available
bg.serial_read=Serial.read
bg.serial_print=Serial.print
bg.soft_serial_print=softSerial.print
bg.soft_serial_read=softSerial.read
bg.soft_serial_available=softSerial.available
#bg.serial_println=serial println
bg.serial_write=serial.write()
bg.serialEvent=serialEvent
bg.glue_digital=glue
bg.glue_number=glue
bg.glue_char=glue
bg.glue_string=glue

bg.serial_write.description=Send message via Serial
bg.serial_print.description=Send message via Serial port
bg.serial_available.description=Data available at Serial port
#bg.serial_println.description=Send message via Serial port with a return
bg.soft_serial_print.description=Send message via Software Serial port
bg.soft_serial_read.description=Read message via Software Serial port
bg.soft_serial_available.description=Data available at Software Serial port
bg.serialEvent.description=Unterprogramm serialEvent z.B. read Remote
bg.glue_digital.description=Glue boolean to string
bg.glue_number.description=Glue number to string
bg.glue_char.description=Glue char to string
bg.glue_string.description=Glue string to string

bc.print=print
bc.ln=new line
bc.rx_pin_number=Rx Pin
bc.tx_pin_number=Tx Pin

#STORAGE
#****************************
bd.storage=Storage

bg.eeprom_read=read 'byte' EEPROM
bg.eeprom_write=write 'byte' EEPROM
bg.eeprom_get=read custom Datatype EEPROM
bg.eeprom_put=write custom Datatype EEPROM
bg.eeprom_length=size of EEPROM
bg.sd_begin=start SD card
bg.sd_open=open file on SD
bg.sd_close=close file on SD
bg.sd_write=write to SD
bg.sd_read=read from SD


bg.eeprom_read.description=Read a byte (0-255) from EEPROM. Each byte consumes just one EEPROM address. Using consecutive addresses is OK
bg.eeprom_write.description=Write a byte (0-255) to EEPROM. Each byte consumes just one EEPROM address. Using consecutive addresses is OK
bg.eeprom_get.description=Read a custom datatype from EEPROM. Each byte consumes one EEPROM address. Check length of your datatype.
bg.eeprom_put.description=Write a custom datatype to EEPROM. Each byte consumes one EEPROM address. Check length of your datatype.
bg.eeprom_length.description=Returns the size of EEPROM 
bg.sd_begin.description=start SD card
bg.sd_open.description=open file on SD
bg.sd_close.description=close file on SD
bg.sd_write.description=write to SD
bg.sd_read.description=read from SD


bc.eeprom_address=address
bc.eeprom_data=data
bc.File=File
bc.sdFileVar  = File Variable
bc.sdFileName = File Name
bc.sdFileMode = Mode
bc.sdWriteData= Data
bc.sdCSPin    = CS

#CODE
#****************************
bd.code=Code Blocks

bg.code_head=add code on Head
bg.code_setup=add code on Setup
bg.code_loop=add code
bg.code_comment= add comment //

bg.code_loop.description=Add custom code
bg.code_head.description=Add custom code to head
bg.code_setup.description=Add custom code to setup()
bg.code_comment.description=add custom command
#****************************